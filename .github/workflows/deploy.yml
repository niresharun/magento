name: Deploy Magento to ECS (EC2)

on:
  push:
    branches:
      - master  # Trigger deployment on push to main branch

env:
  AWS_REGION: us-east-1  # Set your AWS region
  ECR_REPOSITORY: magento/247-p3  # Set your ECR repository name
  ECS_CLUSTER: magento-cluster  # Set your ECS cluster name
  ECS_SERVICE: magento-service  # Set your ECS service name
  CONTAINER_NAME: magento-container  # Set your container name
  ECS_TASK_DEFINITION: magento-task
  # CODEDEPLOY_APPLICATION: magento-app  # Set your CodeDeploy application name
  # CODEDEPLOY_DEPLOYMENT_GROUP: magento-dg  # Set your CodeDeploy deployment group name  
jobs: 
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image_uri::$ECR_REGISTRY/$ECR_REPOSITORY:latest"
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

    # - name: Update ECS task definition
    #   id: update-task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: task-definition.json  # Path to your task definition file
    #     container-name: ${{ env.CONTAINER_NAME }}
    #     image: ${{ steps.build-image.outputs.image }}
  
    # - name: Deploy to ECS
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.update-task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true

    # - name: Create CodeDeploy deployment
    #   run: |
    #     aws deploy create-deployment \
    #       --application-name ${{ env.CODEDEPLOY_APPLICATION }} \
    #       --deployment-group-name ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }} \
    #       --revision '{
    #         "revisionType": "AppSpecContent",
    #         "appSpecContent": {
    #           "content": "{\"version\":1,\"Resources\":[{\"TargetService\":{\"Type\":\"AWS::ECS::Service\",\"Properties\":{\"TaskDefinition\":\"${{ steps.update-task-def.outputs.task-definition-arn }}\",\"LoadBalancerInfo\":{\"ContainerName\":\"${{ env.CONTAINER_NAME }}\",\"ContainerPort\":80}}}}]}"
    #         }
    #       }'        





    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #     container-name: ${{ env.CONTAINER_NAME }}
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true  
    # - name: Build, tag, and push Docker image to Amazon ECR
    #   id: build-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #   run: |
    #     IMAGE_TAG=$(date +%Y%m%d%H%M%S)
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    # - name: Update ECS task definition
    #   id: update-task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: task-definition.json
    #     container-name: ${{ env.CONTAINER_NAME }}
    #     image: ${{ env.image_uri }}

    # - name: Deploy via AWS CodeDeploy
    #   uses: imehedi/actions-awscli-v2@latest
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ env.AWS_REGION }}
    #     args: >
    #       deploy create-deployment 
    #       --application-name magento-app 
    #       --deployment-group-name magento-deployment-group 
    #       --revision {"revisionType":"AppSpecContent","appSpecContent":{"content":"{\"version\":\"0.0\",\"Resources\":[{\"TargetService\":{\"Type\":\"AWS::ECS::Service\",\"Properties\":{\"TaskDefinition\":\"${{ steps.update-task-def.outputs.task-definition-arn }}\",\"LoadBalancerInfo\":{\"ContainerName\":\"magento-container\",\"ContainerPort\":80}}}}]}"}}  

  code-deploy:
      needs: build
      runs-on: ubuntu-latest
      steps:
        - name: Check out the code
          uses: actions/checkout@v4
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1
        - name: Debug File Paths
          run: ls -ltrh    
        - name: Zip and Upload Artifacts
          run: |
            zip -r appspec.zip appspec.yml
            aws s3 cp appspec.zip s3://ziffitymagentoecspoc/appspec.zip
        - name: Deploy with CodeDeploy
          run: |
            aws deploy create-deployment \
              --application-name magento-app \
              --deployment-group-name magento-deployment-group \
              --s3-location bucket=ziffitymagentoecspoc,key=appspec.zip,bundleType=zip
          