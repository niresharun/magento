name: Deploy Magento to ECS (EC2)

on:
  push:
    branches:
      - mage  # Trigger deployment on push to main branch

env:
  AWS_REGION: us-east-1  # Set your AWS region
  ECR_REPOSITORY: magento/247-p3  # Set your ECR repository name
  ECS_CLUSTER: magento-cluster  # Set your ECS cluster name
  ECS_SERVICE: magento-service  # Set your ECS service name
  CONTAINER_NAME: magento-container  # Set your container name
  ECS_TASK_DEFINITION: magento-task-new
  CODEDEPLOY_APPLICATION: magento-app  # Set your CodeDeploy application name
  CODEDEPLOY_DEPLOYMENT_GROUP: magento-deployment-group  # Set your CodeDeploy deployment group name  
  S3_BUCKET: ziffitymagentoecspoc
jobs: 
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image_uri::$ECR_REGISTRY/$ECR_REPOSITORY:latest"
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

  code-deploy:
      needs: build
      runs-on: ubuntu-latest
      steps:
        - name: Check out the code
          uses: actions/checkout@v4
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

        - name: Zip and Upload Artifacts
          run: |
            zip -r appspec.zip appspec.yml scripts/
            aws s3 cp appspec.zip s3://${{ env.S3_BUCKET }}/appspec.zip
            
        - name: Trigger CodeDeploy Deployment
          id: deploy
          run: |
            DEPLOYMENT_ID=$(aws deploy create-deployment \
              --application-name ${{ env.CODEDEPLOY_APPLICATION }} \
              --deployment-group-name ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }} \
              --s3-location bucket=${{ env.S3_BUCKET }},key=appspec.zip,bundleType=zip \
              --query "deploymentId" --output text)
            echo "Deployment ID: $DEPLOYMENT_ID"
            echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
            
        - name: Wait for Deployment to Complete
          run: |
            while true; do
              STATUS=$(aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --query "deploymentInfo.status" --output text)
              echo "Current Status: $STATUS"
              if [[ "$STATUS" == "Succeeded" ]]; then
                echo "Deployment Successful!"
                break
              elif [[ "$STATUS" == "Failed" || "$STATUS" == "Stopped" ]]; then
                echo "Deployment Failed!"
                exit 1
              fi
              sleep 10
            done
            
        - name: Run Magento Deployment Commands in Latest Container
          run: |
            CONTAINER_ID=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --query "taskArns[0]" --output text)
            echo "Latest Task ARN: $CONTAINER_ID"
            
            # Get the running container ID inside the task
            CONTAINER_NAME=$(aws ecs describe-tasks --cluster ${{ env.ECS_CLUSTER }} --tasks $CONTAINER_ID \
              --query "tasks[0].containers[0].name" --output text)
            
            echo "Running Magento deployment commands in container: $CONTAINER_NAME"
            
            # Run Magento deployment commands inside the container
            aws ecs execute-command \
              --cluster ${{ env.ECS_CLUSTER }} \
              --task $CONTAINER_ID \
              --container $CONTAINER_NAME \
              --command "/bin/sh -c 'php bin/magento setup:upgrade && php bin/magento cache:flush && php bin/magento indexer:reindex'" \
              --interactive
            